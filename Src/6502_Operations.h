#include "stdafx.h"

//=================================================================================================
//
// Operations
//
// Flags set as per http://www.obelisk.me.uk/6502/reference.html
//
//=================================================================================================
inline u8& reg_cpuX()
{
	return cpu.reg.X;
}
//-------------------------------------------------------------------------------------------------
inline u8& reg_cpuY()
{
	return cpu.reg.Y;
}
//-------------------------------------------------------------------------------------------------
inline u8& reg_cpuA()
{
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u16& reg_cpuPC()
{
	return cpu.reg.PC;
}
//=================================================================================================
inline u8 op_ADC(u8 val)
{
	u16 newA = cpu.reg.A;
	newA += val;
	newA += cpu.GetFlag(flag_C);
	cpu.SetFlag(flag_C, (newA&0x100)?1:0);
	cpu.SetFlag(flag_V,(newA^cpu.reg.A)&(val^newA)&0x80); // from http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
	cpu.reg.A = newA & 0xff;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_AND(u8 val)
{
	cpu.reg.A &= val;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_ASL(u8 val)
{
	cpu.SetFlag(flag_C, (val & 0x80));
	val <<= 1;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BCC()
{
	return cpu.GetFlag(flag_C)==0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BCS()
{
	return cpu.GetFlag(flag_C)!=0;

}
//-------------------------------------------------------------------------------------------------
inline bool op_BEQ()
{
	return cpu.GetFlag(flag_Z)!=0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_BIT(u8 val)
{
	cpu.SetFlag(flag_Z,cpu.reg.A&val);
	cpu.SetFlag(flag_V, (val & 0x40));
	cpu.SetFlag(flag_N, (val & 0x80));
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BMI()
{
	return cpu.GetFlag(flag_N)!=0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BNE()
{
	return cpu.GetFlag(flag_Z)==0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BPL()
{
	return cpu.GetFlag(flag_N)==0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BVC()
{
	return cpu.GetFlag(flag_V)==0;
}
//-------------------------------------------------------------------------------------------------
inline bool op_BVS()
{
	return cpu.GetFlag(flag_V)!=0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CLC(u8 val)
{
	cpu.SetFlag( flag_C, 0 );
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CLD(u8 val)
{
	cpu.SetFlag( flag_D, 0 );
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CLI(u8 val)
{
	cpu.SetFlag( flag_I, 0 );
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CLV(u8 val)
{
	cpu.SetFlag( flag_V, 0 );
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CMP(u8 val)
{
	cpu.SetFlag(flag_C,cpu.reg.A>=val);
	cpu.SetFlag(flag_Z,cpu.reg.A==val);
	cpu.SetFlag(flag_N,val>cpu.reg.A);
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CPX(u8 val)
{
	cpu.SetFlag(flag_C,cpu.reg.X>=val);
	cpu.SetFlag(flag_Z,cpu.reg.X==val);
	cpu.SetFlag(flag_N,val>cpu.reg.X);
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_CPY(u8 val)
{
	cpu.SetFlag(flag_C,cpu.reg.Y>=val);
	cpu.SetFlag(flag_Z,cpu.reg.Y==val);
	cpu.SetFlag(flag_N,val>cpu.reg.Y);
	return 0;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_DEC(u8 val)
{
	val--;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_DEX(u8 val)
{
	cpu.reg.X--;
	cpu.SetZN(cpu.reg.X);
	return cpu.reg.X;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_DEY(u8 val)
{
	cpu.reg.Y--;
	cpu.SetZN(cpu.reg.Y);
	return cpu.reg.Y;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_EOR(u8 val)
{
	cpu.reg.A ^= val;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_INC(u8 val)
{
	val ++;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_INX(u8 val)
{
	cpu.reg.X++;
	cpu.SetZN(cpu.reg.X);
	return cpu.reg.X;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_INY(u8 val)
{
	cpu.reg.Y++;
	cpu.SetZN(cpu.reg.Y);
	return cpu.reg.Y;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_LDA(u8 val)
{
	cpu.reg.A = val;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_LDX(u8 val)
{
	cpu.reg.X = val;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_LDY(u8 val)
{
	cpu.reg.Y = val;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_LSR(u8 val)
{
	cpu.SetFlag(flag_C, (val & 0x1));
	val >>= 1;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_NOP(u8 val)
{
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_ORA(u8 val)
{
	cpu.reg.A |= val;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_ROL(u8 val)
{
	u8 C = cpu.GetFlag(flag_C);
	cpu.SetFlag(flag_C, (val & 0x80));
	val <<= 1;
	val |= C;
	cpu.SetZN( val );
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_ROR(u8 val)
{
	u8 C = cpu.GetFlag(flag_C);
	cpu.SetFlag(flag_C, (val & 0x1));
	val >>= 1;
	val |= C<<7;
	cpu.SetZN(val);
	return val;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_SBC(u8 val)
{
	return op_ADC(~val);
}
//-------------------------------------------------------------------------------------------------
inline u8 op_SEC(u8 val)
{
	cpu.SetFlag( flag_C, 1 );
	return 1;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_SED(u8 val)
{
	cpu.SetFlag( flag_D, 1 );
	return 1;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_SEI(u8 val)
{
	cpu.SetFlag( flag_I, 1 );
	return 1;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_STA(u8 val)
{
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_STX(u8 val)
{
	return cpu.reg.X;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_STY(u8 val)
{
	return cpu.reg.Y;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TAX(u8 val)
{
	cpu.reg.X = cpu.reg.A;
	cpu.SetZN(cpu.reg.X);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TAY(u8 val)
{
	cpu.reg.Y = cpu.reg.A;
	cpu.SetZN(cpu.reg.Y);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TSX(u8 val)
{
	cpu.reg.X = cpu.reg.S;
	cpu.SetZN(cpu.reg.X);
	return cpu.reg.X;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TXA(u8 val)
{
	cpu.reg.A = cpu.reg.X;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TXS(u8 val)
{
	cpu.reg.S = cpu.reg.X;
	return cpu.reg.S;
}
//-------------------------------------------------------------------------------------------------
inline u8 op_TYA(u8 val)
{
	cpu.reg.A = cpu.reg.Y;
	cpu.SetZN(cpu.reg.A);
	return cpu.reg.A;
}

//=================================================================================================
